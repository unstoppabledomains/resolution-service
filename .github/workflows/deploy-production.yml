name: Deploy production

on:
  workflow_dispatch:
    inputs:
      deployables:
        description: 'api/workers/dispatch.yaml'
        default: 'api workers'
        required: true
env:
  CLOUDSDK_APP_CLOUD_BUILD_TIMEOUT: 1200
  IMAGE_NAME:
    gcr.io/${{ secrets.GCP_PROJECT_ID }}/resolution-service:${{ github.sha }}
  RESOLUTION_POSTGRES_HOST: ${{ secrets.RESOLUTION_POSTGRES_HOST }}
  RESOLUTION_POSTGRES_USERNAME: ${{ secrets.RESOLUTION_POSTGRES_USERNAME }}
  RESOLUTION_POSTGRES_PASSWORD: ${{ secrets.RESOLUTION_POSTGRES_PASSWORD }}
  RESOLUTION_POSTGRES_DATABASE: ${{ secrets.RESOLUTION_POSTGRES_DATABASE}}
  ETHEREUM_JSON_RPC_API_URL: ${{ secrets.ETHEREUM_JSON_RPC_API_URL}}
  VIEWBLOCK_API_KEY: ${{ secrets.VIEWBLOCK_API_KEY }}
  GCP_SQL_INSTANCE: ${{ secrets.GCP_SQL_INSTANCE }}
  ETHEREUM_NETWORK_ID: 1
  ZNS_NETWORK: mainnet
  BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
  NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
  NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  POLYGON_JSON_RPC_API_URL: ${{ secrets.POLYGON_JSON_RPC_API_URL}}
  POLYGON_NETWORK_ID: 137
  POLYGON_UNS_REGISTRY_EVENTS_STARTING_BLOCK: 19345077
  POLYGON_CONFIRMATION_BLOCKS: 200
  MORALIS_API_URL: ${{ secrets.MORALIS_API_URL}}
  MORALIS_APP_ID: ${{ secrets.MORALIS_APP_ID}}
  OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY}}

jobs:
  build_and_push_container_image:
    name: Build and push container image
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_PRODUCTION }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Add Google Cloud Container Registry to Docker config
        run: gcloud auth configure-docker -q

      - name: Docker build and cache
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: _json_key
          password: ${{ env.GOOGLE_GHA_CREDS_PATH }}
          registry: gcr.io
          image_name: ${{ env.IMAGE_NAME }}

      - name: Push container image to Google Container Registry
        run: docker push ${{ env.IMAGE_NAME }}

      - name: Save App Engine configuration to reuse between jobs
        uses: actions/upload-artifact@v2
        with:
          name: create-yaml-sh
          path: create-yaml.sh
          retention-days: 1

  deploy_api:
    name: Deploy API
    if: contains(github.event.inputs.deployables, 'api')
    needs: build_and_push_container_image
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: api
      RESOLUTION_RUNNING_MODE: API,MIGRATIONS

    permissions:
      id-token: write
      contents: read

    steps:
      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_PRODUCTION }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}

      # - name: Set up Google Cloud SDK
      # uses: google-github-actions/setup-gcloud@v0

      - name: Download App Engine configurator
        uses: actions/download-artifact@v2
        with:
          name: create-yaml-sh
          path: ./

      - name: Create `api.yaml`
        shell: bash
        run: bash create-yaml.sh

      # - name: Increase deployment timeout
      # run: gcloud config set app/cloud_build_timeout $BUILD_TIMEOUT

      - id: deploy
        name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v0
        with:
          project_id: unstoppable-domains
          deliverables: api.yaml
          promote: true
          image_url: ${{ env.IMAGE_NAME }}

  deploy_workers:
    name: Deploy workers
    runs-on: ubuntu-latest
    needs: build_and_push_container_image
    if: contains(github.event.inputs.deployables, 'workers')
    env:
      SERVICE_NAME: workers
      RESOLUTION_RUNNING_MODE: ETH_WORKER,ZIL_WORKER,MATIC_WORKER
      POLYGON_BLOCK_FETCH_LIMIT: 50

    permissions:
      id-token: write
      contents: read

    steps:
      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_PRODUCTION }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_PRODUCTION }}

      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v0

      - name: Download App Engine configurator
        uses: actions/download-artifact@v2
        with:
          name: create-yaml-sh
          path: ./

      - name: Create `worker.yaml`
        shell: bash
        run: bash create-yaml.sh

      # - name: Increase deployment timeout
      #   run: gcloud config set app/cloud_build_timeout $BUILD_TIMEOUT

      - id: deploy
        name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v0
        with:
          project_id: unstoppable-domains
          deliverables: workers.yaml
          promote: true
          image_url: ${{ env.IMAGE_NAME }}
