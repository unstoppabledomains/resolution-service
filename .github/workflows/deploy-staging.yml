name: Deploy staging

on:
  workflow_dispatch:
    inputs:
      deployables:
        description: 'api/workers/dispatch.yaml'
        default: 'api workers'
        required: true
env:
  CLOUDSDK_APP_CLOUD_BUILD_TIMEOUT: 1200
  IMAGE_NAME:
    gcr.io/${{ secrets.GCP_STAGING_PROJECT_ID }}/resolution-service:${{
    github.sha }}
  RESOLUTION_POSTGRES_HOST: ${{ secrets.RESOLUTION_STAGING_POSTGRES_HOST }}
  RESOLUTION_POSTGRES_USERNAME:
    ${{ secrets.RESOLUTION_STAGING_POSTGRES_USERNAME }}
  RESOLUTION_POSTGRES_PASSWORD:
    ${{ secrets.RESOLUTION_STAGING_POSTGRES_PASSWORD }}
  RESOLUTION_POSTGRES_DATABASE:
    ${{ secrets.RESOLUTION_STAGING_POSTGRES_DATABASE}}
  ETHEREUM_JSON_RPC_API_URL: ${{ secrets.ETHEREUM_TESTNET_JSON_RPC_API_URL}}
  VIEWBLOCK_API_KEY: ${{ secrets.VIEWBLOCK_API_KEY }}
  GCP_SQL_INSTANCE: ${{ secrets.GCP_STAGING_SQL_INSTANCE }}
  ETHEREUM_NETWORK_ID: 5
  ZNS_NETWORK: 'testnet'
  UNS_REGISTRY_EVENTS_STARTING_BLOCK: 5986000
  CNS_REGISTRY_EVENTS_STARTING_BLOCK: 5986000
  CNS_RESOLVER_ADVANCED_EVENTS_STARTING_BLOCK: 5986000
  POLYGON_JSON_RPC_API_URL: ${{ secrets.POLYGON_TESTNET_JSON_RPC_API_URL}}
  POLYGON_NETWORK_ID: 80001
  POLYGON_UNS_REGISTRY_EVENTS_STARTING_BLOCK: 18956099
  POLYGON_CONFIRMATION_BLOCKS: 200
  MORALIS_API_URL: ${{ secrets.MORALIS_API_URL}}
  MORALIS_APP_ID: ${{ secrets.MORALIS_APP_ID}}
  OPENSEA_API_KEY: ${{ secrets.OPENSEA_API_KEY}}
  POLYGON_RESYNC_FROM: ${{ secrets.RESOLUTION_STAGING_POLYGON_RESYNC_FROM}}
  ETHEREUM_RESYNC_FROM: ${{ secrets.RESOLUTION_STAGING_ETHEREUM_RESYNC_FROM}}
  CLOUD_STORAGE_BUCKET_ID: 'resolution-client-assets-staging'
  
jobs:
  build_and_push_container_image:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/staging'

      - name: Retrieve cached container image layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build container image and cache layers
        run: docker build . --file Dockerfile --tag ${{ env.IMAGE_NAME }}

      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Add Google Cloud Container Registry to Docker
        run: gcloud auth configure-docker -q

      - name: Push container image to Google Cotnainer Registry
        run: docker push ${{ env.IMAGE_NAME }}

      - name: Save App Engine configurator to reuse between jobs
        uses: actions/upload-artifact@v2
        with:
          name: create-yaml-sh
          path: create-yaml.sh
          retention-days: 1

  deploy_api:
    if: contains(github.event.inputs.deployables, 'api')
    runs-on: ubuntu-latest
    needs: build_and_push_container_image
    env:
      SERVICE_NAME: api
      RESOLUTION_RUNNING_MODE: API,MIGRATIONS

    permissions:
      id-token: write
      contents: read

    steps:
      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      # - name: Set up Google Cloud SDK
      # uses: google-github-actions/setup-gcloud@v0

      - name: Download App Engine configurator
        uses: actions/download-artifact@v2
        with:
          name: create-yaml-sh
          path: ./

      - name: Create `api.yaml`
        shell: bash
        run: bash create-yaml.sh

      # - name: Increase deployment timeout
      # run: gcloud config set app/cloud_build_timeout $BUILD_TIMEOUT

      - id: deploy
        name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v0
        with:
          project_id: unstoppable-domains-staging
          deliverables: api.yaml
          promote: true
          image_url: ${{ env.IMAGE_NAME }}

  deploy_workers:
    runs-on: ubuntu-latest
    needs: build_and_push_container_image
    if: contains(github.event.inputs.deployables, 'workers')
    env:
      SERVICE_NAME: workers
      RESOLUTION_RUNNING_MODE: ETH_WORKER,ZIL_WORKER,MATIC_WORKER

    permissions:
      id-token: write
      contents: read

    steps:
      - id: auth
        name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider:
            ${{ secrets.WORKLOAD_ID_PROVIDER_STAGING }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_STAGING }}

      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v0

      - name: Download App Engine configurator
        uses: actions/download-artifact@v2
        with:
          name: create-yaml-sh
          path: ./

      - name: Create `worker.yaml`
        shell: bash
        run: bash create-yaml.sh

      # - name: Increase deployment timeout
      #   run: gcloud config set app/cloud_build_timeout $BUILD_TIMEOUT

      - id: deploy
        name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v0
        with:
          project_id: unstoppable-domains-staging
          deliverables: workers.yaml
          promote: true
          image_url: ${{ env.IMAGE_NAME }}
